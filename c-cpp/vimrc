set nocompatible

" install vim-plug(https://github.com/junegunn/vim-plug)
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


" ++++++++++++++++++++++++++++++++++ plugins
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" async gen tags
Plug 'https://github.com/ludovicchabant/vim-gutentags'

" Any valid git URL is allowed
Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

" Using a non-master branch
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" asyncrun
Plug 'skywind3000/asyncrun.vim'

" Asynchronous linting/fixing for Vim and Language Server Protocol (LSP) integration
Plug 'https://github.com/w0rp/ale'

" vim signify
Plug 'https://github.com/mhinz/vim-signify'

" vim textobj
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-syntax'
Plug 'kana/vim-textobj-function', { 'for':['c', 'cpp', 'vim', 'java'] }
Plug 'sgur/vim-textobj-parameter'

" Additional Vim syntax highlighting for C++ (including C++11/14/17)
Plug 'https://github.com/octol/vim-cpp-enhanced-highlight'

" YCM
Plug 'https://github.com/Valloric/YouCompleteMe'

" auto save
Plug 'https://github.com/907th/vim-auto-save'

call plug#end()

" ++++++++++++++++++++++++++++++++++ common settings
set nonumber
syntax on
colorscheme desert
" tab设置
autocmd FileType c,cc,cpp,py,yml,xml set tabstop=4 | set shiftwidth=4 | set expandtab
" 尾部空格删除
autocmd BufWrite * execute ":mark z"
autocmd BufWrite * execute ":%s/ *$//"
autocmd BufWrite * execute "'z"

set hlsearch " 搜索高亮
set laststatus=2 "显示状态栏
set statusline=[%F][%{&fileformat}][%Y]%m%r\ %p%%:%L:%l,%c%V
set ruler "标尺信息

" ++++++++++++++++++++++++++++++++++ nerdtree settings
map <F3> :NERDTreeToggle<CR>

" ++++++++++++++++++++++++++++++++++ vim-gutentags settings
set tags=./.tags;,.tags
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" +++++++++++++++++++++++++++++++++ asyncrun settings
" 自动打开 quickfix window ，高度为16
let g:asyncrun_open = 16

" 任务结束时候响铃提醒
let g:asyncrun_bell = 1

" 设置 F10 打开/关闭 Quickfix 窗口
nnoremap <F9> :call asyncrun#quickfix_toggle(16)<cr>

" 编译运行单个文件
nnoremap <silent> <F6> :AsyncRun g++ -Wall -ggdb -O0 -std=c++17 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <cr>
nnoremap <silent> <F5> :AsyncRun -raw -cwd=$(VIM_FILEDIR) "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <cr>

" find project root
let g:asyncrun_rootmarks = ['.svn', '.git', '.root', '_darcs', 'build.xml']

" 编译整个项目
nnoremap <silent> <F7> :AsyncRun -cwd=<root> make <cr>

" ++++++++++++++++++++++++++++++++ ale settings
let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_c_gcc_options = '-Wall ggdb -O0 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -ggdb -O0 -std=c++17'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''

let g:ale_sign_error = "\ue009\ue009"
hi! clear SpellBad
hi! clear SpellCap
hi! clear SpellRare
hi! SpellBad gui=undercurl guisp=red
hi! SpellCap gui=undercurl guisp=blue
hi! SpellRare gui=undercurl guisp=magenta

" ++++++++++++++++++++++++++++++++ vim-signify settings
set signcolumn=yes

" ++++++++++++++++++++++++++++++++ syntax highlighting for C++
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_no_function_highlight = 1
let g:cpp_concepts_highlight = 1

" ++++++++++++++++++++++++++++++++ youcompleteme settings
let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/.ycm_extra_conf.py'
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_show_diagnostics_ui = 0
let g:ycm_server_log_level = 'info'
let g:ycm_min_num_identifier_candidate_chars = 2
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_strings=1
let g:ycm_key_invoke_completion = '<c-z>'
set completeopt=menu,menuone

noremap <c-z> <NOP>

let g:ycm_semantic_triggers =  {
            \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
            \ 'cs,lua,javascript': ['re!\w{2}'],
            \ }

" ++++++++++++++++++++++++++++++++ auto save
let g:auto_save = 0  " enable AutoSave on Vim startup
let g:auto_save_events = ["InsertLeave", "TextChanged"]
